name: Production Docker Build and Push

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'package.json'
      - 'server/package.json'
  workflow_dispatch:
    inputs:
      version_tag:
        description: '自定义版本标签 (可选，如: v1.2.3)'
        required: false
        type: string
      update_latest:
        description: '是否更新 latest 标签'
        required: false
        default: false
        type: boolean
      platforms:
        description: '构建平台'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
          - 'linux/amd64,linux/arm64'
          - 'linux/amd64'
          - 'linux/arm64'

env:
  REGISTRY: docker.io
  IMAGE_NAME: shanheee/easyssh

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Sanitize stray submodule entries
      shell: bash
      run: |
        set -e
        # 列出索引中的 gitlinks（疑似误加入的子模块）
        GL=$(git ls-files -s | awk '$1==160000 {print $4}') || true
        if [ -n "$GL" ]; then
          echo "Found gitlink entries:"; echo "$GL"
          for p in $GL; do
            echo "Removing stray submodule index entry: $p"
            git rm -f --cached -r "$p" || true
            rm -rf "$p" || true
          done
        else
          echo "No gitlink entries found"
        fi

        # 确保不存在损坏的 .gitmodules 造成的 foreach 报错
        if [ -f .gitmodules ] && ! git config --file .gitmodules --get-regexp ^submodule 1>/dev/null 2>&1; then
          echo "Empty .gitmodules detected; removing to avoid foreach error"
          rm -f .gitmodules || true
        fi

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
        run_install: false

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: |
          pnpm-lock.yaml
          server/pnpm-lock.yaml
          package.json
          server/package.json

    - name: Extract version from package.json
      id: version
      run: |
        if [ "${{ github.event.inputs.version_tag }}" != "" ]; then
          VERSION="${{ github.event.inputs.version_tag }}"
          echo "Using manual version: $VERSION"
        else
          VERSION="v$(node -p "require('./package.json').version")"
          echo "Using package.json version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable=${{ (github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch') || (github.event_name == 'workflow_dispatch' && github.event.inputs.update_latest == 'true') }}
          type=raw,value=${{ steps.version.outputs.version }}

    - name: Build frontend (pnpm)
      run: |
        pnpm install --no-frozen-lockfile
        pnpm run build

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          GIT_SHA=${{ github.sha }}
          GIT_REF=${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image digest
      run: echo ${{ steps.build.outputs.digest }}

    - name: Build summary
      run: |
        echo "🎉 Docker image built and pushed successfully!"
        echo "� Trigger: ${{ github.event_name }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "👤 Manual trigger by: ${{ github.actor }}"
          echo "🏗️ Platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}"
          echo "🏷️ Update latest: ${{ github.event.inputs.update_latest || 'false' }}"
        fi
        echo "�📦 Version: ${{ steps.version.outputs.version }}"
        echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}"
        if [[ "${{ steps.meta.outputs.tags }}" == *"latest"* ]]; then
          echo "🔗 Latest Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        fi
        echo "🔗 Version Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
