# ===== 稳定版多阶段构建 =====

# 构建参数
ARG BUILD_DATE
ARG GIT_SHA
ARG GIT_REF
ARG BUILDKIT_INLINE_CACHE=1

# 阶段1: 前端构建
FROM node:20-alpine AS frontend-builder

# 安装构建依赖
RUN apk add --no-cache python3 make g++ git

WORKDIR /app

# 复制依赖文件
COPY package*.json ./

# 安装依赖（包含开发依赖用于构建）
RUN npm cache clean --force && \
    npm install --legacy-peer-deps --no-audit

# 复制源代码
COPY . .

# 构建前端
RUN npm run build

# 阶段2: 后端构建
FROM node:20-alpine AS backend-builder

# 安装构建依赖
RUN apk add --no-cache python3 make g++ sqlite sqlite-dev

WORKDIR /app

# 复制后端依赖文件
COPY server/package*.json ./

# 安装生产依赖并编译原生模块
RUN npm cache clean --force && \
    npm install --omit=dev --legacy-peer-deps --no-audit && \
    npm rebuild better-sqlite3

# 复制后端代码
COPY server/ .

# 阶段3: 运行时镜像
FROM node:20-slim AS runtime

# 避免交互式安装
ENV DEBIAN_FRONTEND=noninteractive

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    sqlite3 \
    libsqlite3-0 \
    nginx \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 创建非root用户
RUN groupadd -r appuser && useradd -r -g appuser appuser

# 创建应用目录
WORKDIR /app

# 复制构建产物
COPY --from=backend-builder /app ./server
COPY --from=frontend-builder /app/dist ./public

# 复制nginx配置
COPY nginx.conf /etc/nginx/nginx.conf

# 复制启动脚本
COPY start.sh /start.sh
RUN chmod +x /start.sh

# 设置权限
RUN chown -R appuser:appuser /app && \
    mkdir -p /var/log/nginx /var/cache/nginx /run && \
    chown -R appuser:appuser /var/log/nginx /var/cache/nginx /run

# 暴露端口
EXPOSE 3000 8000 9527

# 设置环境变量
ENV NODE_ENV=production \
    PORT=8000 \
    USER=appuser

# 添加构建信息标签
LABEL maintainer="EasySSH Team" \
      version="1.0.0" \
      description="现代化的SSH客户端" \
      build-date="${BUILD_DATE}" \
      git-sha="${GIT_SHA}" \
      git-ref="${GIT_REF}"

# 切换到非root用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# 启动命令
CMD ["/start.sh"]
