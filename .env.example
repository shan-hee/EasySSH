# 服务端口配置
VITE_PORT=3000                # 前端开发服务器端口
SERVER_PORT=8000              # 后端服务器端口

# API配置
VITE_API_BASE_URL=/api        # API基础路径
VITE_API_TARGET=http://localhost:8000    # API代理目标

# 日志配置
VITE_LOG_LEVEL=info

# SQLite配置
# 开发环境使用本地SQLite数据库文件
SQLITE_PATH=./server/data/easyssh.sqlite

# 安全配置
# 强烈建议在生产环境中更改这些值
JWT_SECRET=your-jwt-secret-key-please-change-in-production
JWT_EXPIRES=86400 # 令牌有效期（秒）

# SSH会话配置
SSH_TIMEOUT=10000 # SSH连接超时时间（毫秒）
SSH_KEEP_ALIVE=30000 # SSH保活间隔（毫秒）

# 敏感数据加密密钥
# 请在生产环境中更改为长度足够的复杂密钥
ENCRYPTION_KEY=your-encryption-key-please-change-in-production

# 跨域设置
# 允许的客户端源（生产环境中应明确指定）
CORS_ORIGIN=* 

# 日志配置
VITE_LOG_LEVEL=info # 可选值: debug, info, warn, error

# 资源限制
MAX_CONNECTIONS_PER_USER=10 # 每用户最大并发连接数
MAX_UPLOAD_SIZE=10485760 # 最大上传文件大小（字节）

# 性能调优
NODE_CACHE_TTL=3600 # 默认缓存TTL（秒）
NODE_CACHE_CHECK_PERIOD=600 # 缓存检查过期项目周期（秒）

# 可选：WebSocket配置
WS_PING_TIMEOUT=5000 # WebSocket ping超时（毫秒）

# 提示：
# 1. 生产环境请确保设置强密钥
# 2. 可以使用以下命令生成随机密钥:
#    node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 3. 数据库：SQLite本地文件存储 + node-cache内存缓存

# 其他配置项
NODE_ENV=development # 环境: development, production, test

# Token有效期（单位：秒）
TOKEN_EXPIRES_IN=60*60*48  # 48小时

# 部署时注意事项
# 1. 确保data目录存在并有写入权限
# 2. SQLite数据库文件应妥善备份
# 3. 安全密钥应妥善保管且在生产环境中更改

# 本地开发环境设置
# 1. 复制此文件为 .env
# 2. 修改必要的配置项
# 3. 确保SQLite数据库路径正确

# EasySSH开发指南文档

## 系统架构概述

EasySSH是一个现代化的SSH客户端，采用前后端分离架构：
- 前端：Vue.js框架开发的单页应用
- 后端：Node.js + Express的API服务器
- 数据库：MongoDB和Redis混合存储

## 环境准备

### 必备软件
- Node.js >= 16.0.0
- MongoDB
- Redis
- Git

## 数据库配置与启动

### MongoDB 设置
```bash
# 本地安装MongoDB后启动
sudo systemctl start mongod

# 检查MongoDB状态
sudo systemctl status mongod
```

### Redis 设置
```bash
# 本地安装Redis后启动
sudo systemctl start redis

# 检查Redis状态
sudo systemctl status redis
```

### 数据库连接配置
1. 复制项目根目录下的`.env.example`文件并重命名为`.env`
2. 编辑`.env`文件，设置MongoDB和Redis连接信息： 