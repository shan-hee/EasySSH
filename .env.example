# EasySSH 环境变量配置模板
# 复制此文件为 .env 并根据环境修改配置

# 运行环境配置
NODE_ENV=development          # 运行环境: development, production

# 服务端口配置
VITE_PORT=8520                # 前端开发服务器端口
SERVER_PORT=8000              # 后端服务器端口

# 服务器地址配置（用于监控服务安装）
# 可以配置域名或公网IP地址，如果不配置则自动获取当前服务器的公网IP
# 示例: SERVER_ADDRESS=your-domain.com 或 SERVER_ADDRESS=123.456.789.10
SERVER_ADDRESS=

# API配置
VITE_API_BASE_URL=/api        # API基础路径
VITE_API_TARGET=http://localhost:8000    # API代理目标

# 日志配置
VITE_LOG_LEVEL=warn           # 前端日志级别: debug, info, warn, error

# 后端日志配置
LOG_ENABLE_FILE=false         # 是否启用文件日志输出，默认false
LOG_ENABLE_CONSOLE=true       # 是否启用控制台输出，默认true
LOG_MAX_FILE_SIZE=10485760    # 单个日志文件最大大小（字节）默认10MB
LOG_MAX_BACKUP_FILES=5        # 保留的备份文件数量，默认5个
LOG_MAX_AGE_DAYS=7            # 日志文件保留天数，默认7天
LOG_DIRECTORY=./logs   # 日志文件目录

# SQLite配置
SQLITE_PATH=./server/data/easyssh.sqlite

# 安全配置
# 强烈建议在生产环境中更改这些值
JWT_SECRET=your-jwt-secret-key-please-change-in-production
JWT_EXPIRES=86400             # 令牌有效期（秒）默认48小时

# 敏感数据加密密钥
# 请在生产环境中更改为长度足够的复杂密钥
ENCRYPTION_KEY=your-encryption-key-please-change-in-production

# 跨域设置
# 允许的客户端源（生产环境中应明确指定）
CORS_ORIGIN=*

# 资源限制
MAX_CONNECTIONS_PER_USER=10   # 每用户最大并发连接数
MAX_UPLOAD_SIZE=104857600         # 最大上传文件大小（字节）默认100MB

# 性能调优
NODE_CACHE_TTL=3600           # 默认缓存TTL（秒）默认1小时
NODE_CACHE_CHECK_PERIOD=600   # 缓存检查过期项目周期（秒）默认10分钟

# 前端缓存配置
VITE_CACHE_MEMORY_MAX_SIZE=100      # 内存缓存最大条目数
VITE_CACHE_MEMORY_TTL=1800000       # 缓存有效期（毫秒，默认30分钟）
VITE_CACHE_SUGGESTIONS_MAX_SIZE=50  # 建议缓存最大条目数
VITE_CACHE_SYNC_INTERVAL=300000     # 后台同步间隔（毫秒，默认5分钟）

# WebSocket配置
WS_PING_TIMEOUT=5000          # WebSocket ping超时（毫秒）
WS_MAX_MESSAGE_SIZE=157286400 # WebSocket最大消息大小（字节）默认150MB，支持100MB文件的Base64编码

# Docker配置
DOCKER_REGISTRY=docker.io
DOCKER_USERNAME=shanheee
DOCKER_IMAGE_NAME=easyssh

# Token有效期（单位：秒）
TOKEN_EXPIRES_IN=172800       # 48小时

# 配置说明：
# 1. 生产环境请确保设置强密钥
# 2. 可以使用以下命令生成随机密钥:
#    node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 3. 数据库：SQLite本地文件存储 + node-cache内存缓存
# 4. 确保data目录存在并有写入权限
# 5. SQLite数据库文件应妥善备份